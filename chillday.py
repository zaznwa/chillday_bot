from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)
import sqlite3

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
CHOOSING, ADD_NAME, ADD_PHONE, ORDER_PHONE = range(4)

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
main_keyboard = ReplyKeyboardMarkup(
    [["üßç‚Äç‚ôÇÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", "üßã –í—ã–¥–∞—Ç—å –Ω–∞–ø–∏—Ç–æ–∫"], ["üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤"]],
    resize_keyboard=True
)

# === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===
conn = sqlite3.connect("clients.db")
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS clients (
        phone TEXT PRIMARY KEY,
        name TEXT,
        drinks INTEGER DEFAULT 0
    )
''')
conn.commit()

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç CHILLDAY üßã", reply_markup=main_keyboard)
    return CHOOSING

async def handle_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üßç‚Äç‚ôÇÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞":
        await update.message.reply_text("–í–≤–µ–¥–∏ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")
        return ADD_NAME

    elif text == "üßã –í—ã–¥–∞—Ç—å –Ω–∞–ø–∏—Ç–æ–∫":
        await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞:")
        return ORDER_PHONE

    elif text == "üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤":
        cursor.execute("SELECT name, phone, drinks FROM clients")
        clients = cursor.fetchall()
        if not clients:
            await update.message.reply_text("üôÖ‚Äç‚ôÇÔ∏è –ü–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ—Ç.")
        else:
            msg = "üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤:\n\n"
            for name, phone, drinks in clients:
                msg += f"{name} ({phone}) ‚Äî {drinks}/5 –Ω–∞–ø–∏—Ç–∫–æ–≤\n"
            await update.message.reply_text(msg)
        return CHOOSING

    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è", reply_markup=main_keyboard)
        return CHOOSING

async def add_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return ADD_PHONE

async def add_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = context.user_data["name"]
    phone = update.message.text

    cursor.execute("INSERT OR IGNORE INTO clients (phone, name, drinks) VALUES (?, ?, 0)", (phone, name))
    conn.commit()
    await update.message.reply_text(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {name} —Å –Ω–æ–º–µ—Ä–æ–º {phone} –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=main_keyboard)
    return CHOOSING

async def order_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text
    cursor.execute("SELECT name, drinks FROM clients WHERE phone = ?", (phone,))
    result = cursor.fetchone()

    if result:
        name, drinks = result
        drinks += 1
        if drinks >= 5:
            cursor.execute("UPDATE clients SET drinks = 0 WHERE phone = ?", (phone,))
            msg = f"üéâ {name} –ø–æ–ª—É—á–∏–ª 5-–π –Ω–∞–ø–∏—Ç–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ! –°—á—ë—Ç—á–∏–∫ —Å–±—Ä–æ—à–µ–Ω."
        else:
            cursor.execute("UPDATE clients SET drinks = ? WHERE phone = ?", (drinks, phone))
            msg = f"ü•§ –£ {name} —Ç–µ–ø–µ—Ä—å {drinks}/5 –Ω–∞–ø–∏—Ç–∫–æ–≤."
        conn.commit()
        await update.message.reply_text(msg, reply_markup=main_keyboard)
    else:
        await update.message.reply_text("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_keyboard)

    return CHOOSING

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨áÔ∏è", reply_markup=main_keyboard)
    return CHOOSING

# === –ó–∞–ø—É—Å–∫ ===

app = ApplicationBuilder().token("7898159101:AAGhICr4HQ-lZbhfq78eJcWYsXwU7Lzd80w").build()

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        CHOOSING: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_choice)],
        ADD_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_name)],
        ADD_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_phone)],
        ORDER_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, order_phone)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

app.add_handler(conv_handler)

print("üöÄ –ë–æ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∑–∞–ø—É—â–µ–Ω!")
async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cursor.execute("DELETE FROM clients")
    conn.commit()
    await update.message.reply_text("üóëÔ∏è –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã —É–¥–∞–ª–µ–Ω—ã! –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
app.add_handler(CommandHandler("reset", reset))

app.run_polling()
